{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","actualizarState","e","target","name","value","error","actualizarError","className","onSubmit","preventDefault","trim","console","log","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAuGeA,EApGI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAEDC,mBAAS,CACpCC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,KAPkB,mBAEzBC,EAFyB,KAEnBC,EAFmB,KAS1BC,EAAkB,SAACC,GAErBF,EAAe,2BACRD,GADO,kBAETG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAbF,EAgBCZ,oBAAS,GAhBV,mBAgBzBa,EAhByB,KAgBlBC,EAhBkB,KAiBzBb,EAA+CK,EAA/CL,QAASC,EAAsCI,EAAtCJ,YAAaC,EAAyBG,EAAzBH,MAAOC,EAAkBE,EAAlBF,KAAMC,EAAYC,EAAZD,SA4B1C,OACI,eAAC,WAAD,WACI,4CACCQ,EAAQ,mBAAGE,UAAU,eAAb,+CAAoE,KAC7E,uBACIC,SA/BO,SAACP,GAIhB,GAHAA,EAAEQ,iBAGqB,KAAnBhB,EAAQiB,QAAwC,KAAvBhB,EAAYgB,QAAiC,KAAhBd,EAAKc,QAAkC,KAAjBf,EAAMe,QAAqC,KAApBb,EAASa,OAG5G,OAFAC,QAAQC,IAAI,qBACZN,GAAgB,GAIpBA,GAAgB,GAGhBR,EAAKe,GAAKC,cAGVvB,EAAUO,GAEVC,EAAe,CACXN,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,MAOV,UAEI,mDACA,uBACIkB,KAAK,OACLZ,KAAK,UACLI,UAAU,eACVS,YAAY,iBACZC,SAAUjB,EACVI,MAAOX,IAEX,oDACA,uBACIsB,KAAK,OACLZ,KAAK,cACLI,UAAU,eACVS,YAAY,gCACZC,SAAUjB,EACVI,MAAOV,IAEX,0CACA,uBACIqB,KAAK,OACLZ,KAAK,QACLI,UAAU,eACVU,SAAUjB,EACVI,MAAOT,IAEV,yCACD,uBACIoB,KAAK,OACLZ,KAAK,OACLI,UAAU,eACVU,SAAUjB,EACVI,MAAOR,IAEX,gDACA,0BACIW,UAAU,eACVJ,KAAK,WACLc,SAAUjB,EACVI,MAAOP,IAEX,wBAAQkB,KAAK,SAASR,UAAU,8BAAhC,iCCjEDW,EA3BF,SAAC,GAA0B,IAAzBpB,EAAwB,EAAxBA,KAAMqB,EAAkB,EAAlBA,aACjB,OACI,sBAAKZ,UAAU,OAAf,UACI,0CACa,+BAAOT,EAAKL,aAEzB,8CACiB,+BAAOK,EAAKJ,iBAE7B,wCACW,+BAAOI,EAAKH,WAEvB,uCACU,+BAAOG,EAAKF,UAEtB,2CACc,+BAAOE,EAAKD,cAG1B,wBAAQU,UAAU,+BAA+Ba,QAAS,kBAAKD,EAAarB,EAAKe,KAAjF,gCCoCGQ,MAvDf,WAEE,IAAIC,EAAiBC,KAAKC,MAAOC,aAAaC,QAAQ,UACjDJ,IACHA,EAAiB,IAJN,MAMiB9B,mBAAS8B,GAN1B,mBAMNK,EANM,KAMCC,EAND,KASbC,qBAAU,WACFP,EACFG,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,IAE7CF,aAAaK,QAAQ,QAASP,KAAKQ,UAAU,OAGhD,CAACJ,EAAOL,IAEX,IASMH,EAAe,SAAAN,GACnB,IAAMmB,EAAcL,EAAMM,QAAO,SAAAnC,GAAI,OAAIA,EAAKe,KAAOA,KACrDe,EAAaI,IAITE,EAA0B,IAAjBP,EAAMQ,OAAe,eAAiB,uBACrD,OACE,eAAC,WAAD,WACE,4DACA,qBAAK5B,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,CAAYhB,UAtBJ,SAAAO,GAChBa,QAAQC,IAAI,aAAcd,GAC1B8B,EAAa,GAAD,mBACPD,GADO,CAEV7B,UAoBI,sBAAKS,UAAU,kBAAf,UACE,6BAAK2B,IACJP,EAAMS,KAAI,SAAAtC,GAAI,OACb,cAAC,EAAD,CAAoBA,KAAMA,EAAMqB,aAAcA,GAAnCrB,EAAKe,mBCpCfwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4480d4d4.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nconst Formulario = ({crearCita}) => {\n    //crear State de citas\n    const [cita, actualizarCita] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: '',\n    });\n    const actualizarState = (e) => {\n        //console.log(\"Escribiendo...\", e.target.value);\n        actualizarCita({\n            ...cita,\n            [e.target.name]: e.target.value\n        });\n    };\n    const [error, actualizarError] = useState(false)\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\n    // Cuando el usuario presiona agregar cita\n    const submitCita = (e) => {\n        e.preventDefault();\n    \n        //Validar\n        if (mascota.trim() === \"\" || propietario.trim() === \"\" || hora.trim() === \"\" || fecha.trim() === \"\" || sintomas.trim() === \"\") {\n            console.log(\"Hay un error\");\n            actualizarError(true)\n            return;\n        }\n        //Eliminar mensaje previo\n        actualizarError(false);\n        \n        //Asignar un ID\n        cita.id = uuidv4();\n\n        //crear la cita\n        crearCita(cita);\n        //Reiniciar el form\n        actualizarCita({\n            mascota: '',\n            propietario: '',\n            fecha: '',\n            hora: '',\n            sintomas: '',\n        });\n    };\n    return ( \n        <Fragment>\n            <h2>Crear cita</h2>\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null}\n            <form\n                onSubmit={submitCita}>\n                <label>Nombre Mascota</label>\n                <input \n                    type=\"text\"\n                    name=\"mascota\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Mascota\"\n                    onChange={actualizarState}\n                    value={mascota}\n                    />\n                <label>Nombre Dueño</label>\n                <input \n                    type=\"text\"\n                    name=\"propietario\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Dueño de la mascota\"\n                    onChange={actualizarState}\n                    value={propietario}\n                    />\n                <label>Fecha</label>\n                <input \n                    type=\"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={fecha}\n                    />\n                 <label>Hora</label>\n                <input \n                    type=\"time\"\n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={hora}\n                    />\n                <label>Síntomas</label>\n                <textarea\n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={actualizarState}\n                    value={sintomas}\n                ></textarea>\n                <button type=\"submit\" className=\"u-full-width button-primary\">Agregar cita</button>\n            </form>\n        </Fragment>\n     );\n}\n Formulario.propTypes = {\n     crearCita: PropTypes.func.isRequired\n }\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cita = ({cita, eliminarCita}) => {\n    return ( \n        <div className=\"cita\">\n            <p>\n                Mascota: <span>{cita.mascota}</span>\n            </p>\n            <p>\n                Propietario: <span>{cita.propietario}</span>\n            </p>\n            <p>\n                Fecha: <span>{cita.fecha}</span>\n            </p>\n            <p>\n                Hora: <span>{cita.hora}</span>\n            </p>\n            <p>\n                Sintomas: <span>{cita.sintomas}</span>\n            </p>\n\n            <button className=\"button eliminar u-full-width\" onClick={()=> eliminarCita(cita.id)}> Eliminar &times;</button>\n        </div>\n     );\n}\nCita.propTypes = {\n    cita: PropTypes.object.isRequired,\n    eliminarCita: PropTypes.func.isRequired\n}\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario'\nimport Cita from './components/Cita'\nfunction App() {\n  //citas en local storage\n  let citasIniciales = JSON.parse (localStorage.getItem(\"citas\"));\n  if (!citasIniciales) {\n    citasIniciales = []\n  }\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //use effect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {    \n      if (citasIniciales) {\n        localStorage.setItem('citas', JSON.stringify(citas))\n      } else {\n        localStorage.setItem('citas', JSON.stringify([]))\n      }\n\n  }, [citas, citasIniciales])\n  //funcion que agrega una nueva cita y la suma a las actuales\n  const crearCita = cita => {\n    console.log(\"nueva cita\", cita)\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  };\n\n  //funcion que elimina una cita por su id\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  }\n\n  //Mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n  return (\n    <Fragment >\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita}/>\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita}/>\n            )) }\n          </div>\n\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}